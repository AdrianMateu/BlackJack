const myModule = (() => {
	"use strict";
	let e = [],
		t = [];
	const n = ["C", "D", "H", "S"],
		s = ["A", "J", "Q", "K"],
		r = document.querySelector("#btnDealCard"),
		l =
			(document.querySelector("#btnNewGame"),
			document.querySelector("#btnStop")),
		d = document.querySelector("#btnBg"),
		o = document.querySelectorAll(".divCards"),
		a = document.querySelectorAll("small");
	let c = 1,
		i = [
			"assets/img/background1.jpg",
			"assets/img/background2.jpg",
			"assets/img/background3.jpg",
			"assets/img/background4.jpg",
		];
	const u = () => {
			e = [];
			for (let t = 2; t <= 10; t++) for (let s of n) e.push(t + s);
			for (let t of n) for (let n of s) e.push(n + t);
			return _.shuffle(e);
		},
		g = () => (0 === e.length ? Swal.fire("The deck is empty") : e.pop()),
		m = (e, n) => (
			(t[n] =
				t[n] +
				((e) => {
					const t = e.substring(0, e.length - 1);
					return isNaN(t) ? ("A" === t ? 11 : 10) : 1 * t;
				})(e)),
			(a[n].innerText = t[n]),
			t[n]
		),
		b = (e, t) => {
			const n = document.createElement("img");
			(n.src = `assets/img/cards/${e}.png`),
				n.classList.add("card"),
				o[t].append(n);
		},
		f = (e) => {
			let n = 0;
			do {
				const e = g();
				(n = m(e, t.length - 1)), b(e, t.length - 1);
			} while (n < e && e <= 21);
			(() => {
				const [e, n] = t;
				setTimeout(() => {
					n === e
						? Swal.fire("Draw, try again!")
						: e > 21
						? Swal.fire("Computer win!")
						: n > 21
						? Swal.fire("You win!!")
						: Swal.fire("Computer win!");
				}, 100);
			})();
		};
	r.addEventListener("click", () => {
		l.disabled = !1;
		const e = g(),
			t = m(e, 0);
		b(e, 0),
			t > 21
				? ((r.disabled = !0), (l.disabled = !0), f(t))
				: 21 === t && ((r.disabled = !0), (l.disabled = !0), f(t));
	}),
		l.addEventListener("click", () => {
			(r.disabled = !0), (l.disabled = !0), f(t[0]);
		}),
		d.addEventListener("click", () => {
			(document.body.style.backgroundImage = "url('" + i[c] + "')"), p();
		});
	const p = () => {
		c = ++c % i.length;
	};
	return {
		newGame: (n = 2) => {
			(e = u()), (t = []);
			for (let e = 0; e < n; e++) t.push(0);
			a.forEach((e) => (e.innerText = 0)),
				o.forEach((e) => (e.innerHTML = "")),
				(r.disabled = !1),
				(l.disabled = !0);
		},
	};
})();
